<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hakurei Shrine</title>
  <subtitle>What a Shame.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lingsamuel.github.io/"/>
  <updated>2017-03-14T04:50:11.771Z</updated>
  <id>https://lingsamuel.github.io/</id>
  
  <author>
    <name>Kisaragi Sarasa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sexual</title>
    <link href="https://lingsamuel.github.io/2017/03/14/Sexual/"/>
    <id>https://lingsamuel.github.io/2017/03/14/Sexual/</id>
    <published>2017-03-14T04:49:55.000Z</published>
    <updated>2017-03-14T04:50:11.771Z</updated>
    
    <content type="html"><![CDATA[<p>不应当出现对特定性别的社会期望。</p>
<p>你不能说“男孩子不应该喜欢粉红色”/“男孩子不应该喜欢洋娃娃”，因为喜欢什么东西是一个人的自由呀。同样的，你也不能要求男孩子不能这样讲话，又不是反社会反人权言论。<br>其他的社会期望也往往能被反驳，因为这种社会期望本质上是希望“大家都一样，没有特殊的存在”，然而实际上这是不可能的。</p>
<p>作为独立的个体，你应当有选择“特殊”的权利——不过对这个个体来说，这个“特殊”才是稀松平常。</p>
<p>这种现象，非常夸大地说，正说明了性别的社会期望有逐渐被抹平的趋势，就从男性主动向“弱势的”女性一方靠拢开始(当然实际情况很大可能是这帮人在一大群汉子前面装妹子求装备)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不应当出现对特定性别的社会期望。&lt;/p&gt;
&lt;p&gt;你不能说“男孩子不应该喜欢粉红色”/“男孩子不应该喜欢洋娃娃”，因为喜欢什么东西是一个人的自由呀。同样的，你也不能要求男孩子不能这样讲话，又不是反社会反人权言论。&lt;br&gt;其他的社会期望也往往能被反驳，因为这种社会期望本质上是希
    
    </summary>
    
    
      <category term="Backup" scheme="https://lingsamuel.github.io/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>God</title>
    <link href="https://lingsamuel.github.io/2017/03/14/God/"/>
    <id>https://lingsamuel.github.io/2017/03/14/God/</id>
    <published>2017-03-14T04:49:04.000Z</published>
    <updated>2017-03-14T04:49:16.078Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>如果神希望我们信仰他:<br>1.1 神是全知全能的:<br>我应该被全知全能的神偷偷改造成信仰神了，但事实上没有，所以两个前提至少一个不成立，请看其他两种情况。<br>1.2 神不是全知全能的:<br>那我还不如信仰科学，你又不全能。</li>
<li>如果神不希望我们信仰他:<br>那你就爱信不信吧……神都这么说了。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;如果神希望我们信仰他:&lt;br&gt;1.1 神是全知全能的:&lt;br&gt;我应该被全知全能的神偷偷改造成信仰神了，但事实上没有，所以两个前提至少一个不成立，请看其他两种情况。&lt;br&gt;1.2 神不是全知全能的:&lt;br&gt;那我还不如信仰科学，你又不全能。&lt;/li&gt;
&lt;li&gt;如果神
    
    </summary>
    
    
      <category term="Backup" scheme="https://lingsamuel.github.io/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>CLion Config</title>
    <link href="https://lingsamuel.github.io/2017/03/14/CLion-Config/"/>
    <id>https://lingsamuel.github.io/2017/03/14/CLion-Config/</id>
    <published>2017-03-14T04:43:50.000Z</published>
    <updated>2017-03-14T04:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>先上一张 IDE 九宫格，我做的。</p>
<p>面向一些小白，我不想再看到 devcpp 之类的玩意儿了。正好自己 Windows 下的环境被@Colliot给弄崩了，今晚重装的时候顺便就写这篇文章好了。<br>重点：如果你真的真的是纯纯的萌新，我还是建议你用记事本之类的东西写一段时间，前期不要太过依赖静态分析。至少，基本语法得掌握吧。</p>
<p>如果你想配置 VS，请转到孙明琦的这个回答：如何配置 VS。</p>
<p>但我个人觉得，如果想尽量简单地配置一个能用的IDE，而无视那些七七八八的功能，JB系的IDE是最好的——除了全英文以外。</p>
<p>PS：JB系的IDE学生优惠：<a href="https://www.jetbrains.com/student/，我用" target="_blank" rel="external">https://www.jetbrains.com/student/，我用</a> .edu.cn 的邮箱，不费什么力气就拿到了授权。当然毕业后不应该继续使用。</p>
<p>当然英语也不应该成为一个合格的程序员的障碍，如果你觉得是，请尽量阅读靠谱的中文化书籍，例如轮子哥审校的 C++ Primer，这类书籍的特点是名词翻译会给出原文，然后把这些名词记录下来，做一个词典。</p>
<p>JetBrains 系的 IDE 不仅跨平台，而且长得都极相似，配置也可以互相导入（当然必须是共有的配置），而且没什么学习难度，可以很快上手。本文会以 CLion 为例，作一些简单的介绍——其实我觉得没有什么必要，但是有一些学弟学妹用 devcpp 问一些很奇怪的问题，缩进什么的也很令人恼火，我还是写一写吧。</p>
<p>CLion</p>
<p>下载：CLion</p>
<p>安装：照着指引装，这不会也要人教吧？看标题，本文写的是配置而不是教你怎么用 Windows。</p>
<p>环境：mingw-w64，安装选项：Version 选最新的， Architecture 选 x86_64，Threads 选 posix，Exception 选 seh，Build revision 选 1，为什么我并不想解释，想知道的可以自己去查，因为本文是讲 CLion 配置的。装好后，将 bin 目录加入环境变量。如果你的电脑甚至不是64位的，我建议你不要使用任何 IDE。</p>
<p>配置：点开 File-Settings，下面的配置默认你在这里执行。</p>
<p>设定 Toolchain：</p>
<p>导入导出配置：</p>
<p>File 选项卡里自己找。</p>
<p>更改配色：</p>
<p>选一个容易修改的配色，点Save As，保存为可编辑的主题，然后就能开始自定义配色了。</p>
<p>General 选项：</p>
<p>可以定义一些规则，在其他设置中可以选继承自它们。</p>
<p>Code Style 配置：</p>
<p>解决神教之争。</p>
<p>Keymap：</p>
<p>我就提几个快捷键，Ctrl + Alt + L，默认是用来格式化代码的，另一个是按住 Ctrl 键加鼠标单击，你可以跳转比如函数定义、变量定义、函数使用、变量使用等等地方，主要看使用场景。Ctrl + Alt + 左右箭头可以跳转到上一处/下一处光标所在的地方，可以在使用前一个快捷键后快速回到原位。Double Shift，可以在工程中搜索你想要的东西。</p>
<p>其他快捷键，可以在Keymap中查看修改，菜单中有的，一般会附上快捷键。另外有插件可以提示你使用快捷键——Key promoter，它的作用是在你用鼠标完成一个有绑定快捷键的操作时，提示你快捷键是什么。</p>
<p>在这里搜索安装：</p>
<p>基本使用：</p>
<p>编码：</p>
<p>右下角，默认 UTF-8（可以设置）。假如你用了其他编码比如 GBK，CLion 会假定是 UTF-8 来打开，自然中文之类的可能乱码，此时你选择其他编码会有选项问你是要转换还是重新载入，应该先选择重新载入成 GBK，再转换成 UTF-8。当然你要是愿意用 GBK 我没意见。</p>
<p>布局：</p>
<p>所有标签都是可以拖动的。我只介绍几个常用的标签——Project Structure Terminal Debug。</p>
<p>一个是文件树，一个是结构树，一个是终端。</p>
<p>可以用 Terminal 窗口左上角的加号来打开新的 Terminal，所在目录是当前 Project 的目录，红叉用来关闭当前 Terminal，把标签折叠并没有关闭这个 Terminal。</p>
<p>另外看到左下的 Favorite 了吗，这个标签和左上的 Project 标签可以同时开启，一般我会把 Structure 拖到这里来，这样就能同时浏览。</p>
<p>PS：如果你在安装过程中遇到报错说“请求的操作需要提升”，请管理员权限运行。</p>
<p>Debug：</p>
<p>Shift + F9 启动 Debug，CMakeLists 没有好好写的话，需要指定 Executable。</p>
<p>断点设置：</p>
<p>行号右边一点单击一下就能设置断点，然后在 Debug 模式下运行，会在断点处停下。</p>
<p>Debug 标签又分两个标签，一个是 Debugger，一个是 Console，顾名思义。</p>
<p>红框的部分是如何越过这个断点，鼠标移上去有提示，最左下角也会有一行小小的提示，这个提示不限于 Debug。常用的有 Step Over、Step Into、Step Out，如果想继续运行直到下个断点，点左边那个绿色的箭头。Stop 按钮再往下有一个 View Breakpoints，可以查看断点并进行一些高级设置，不在本文讨论范围内。</p>
<p>总之，CLion 有这么多按钮，你每个都看一看，差不多就能满足大部分需求，有其他的需要，例如语言支持，会有强大的插件库帮你解决（并且还有智能提示你安装），还有一些常见的设置上的问题，也会有智能提示——当然虽然智能提示大部分时间是能相信的，但是你们遇到问题也要自己判断，不要一味地依赖于 IDE。</p>
<p>提升生活质量的用法：</p>
<p>Live Template</p>
<p>Template Text 下面有一个使用场景的设定，对于语言有一些了解的可以正确设定——至少需要了解 Declaration/Statement/Expression 的区别。</p>
<p>$END$ 变量标明输入完成后光标所在的位置。变量输入可以有默认值，也可以有单处输入，多处拷贝的效果，C++的 for 是有代表性的例子。</p>
<p>正确设定后，可以作为自定义的补全使用。例如输入 hw 补全出一整句 Hello World 什么的。</p>
<p>Applicable 乱设定的后果：</p>
<p>例如应该输入一个变量的地方补全出一整句 Hello World，正确设定的情形下不会出现在补全列表。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上一张 IDE 九宫格，我做的。&lt;/p&gt;
&lt;p&gt;面向一些小白，我不想再看到 devcpp 之类的玩意儿了。正好自己 Windows 下的环境被@Colliot给弄崩了，今晚重装的时候顺便就写这篇文章好了。&lt;br&gt;重点：如果你真的真的是纯纯的萌新，我还是建议你用记事本之类的
    
    </summary>
    
    
      <category term="Backup" scheme="https://lingsamuel.github.io/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>Why Brainfuck Rocks</title>
    <link href="https://lingsamuel.github.io/2017/03/14/Why-Brainfuck-Rocks/"/>
    <id>https://lingsamuel.github.io/2017/03/14/Why-Brainfuck-Rocks/</id>
    <published>2017-03-14T04:42:37.000Z</published>
    <updated>2017-03-14T04:42:53.252Z</updated>
    
    <content type="html"><![CDATA[<p>实现 brainfuck 的难度是评价语言好不好的唯一标准<br>如果你自己造的语言，能很容易的实现一个 brainfuck，那么你就写一个 bf 来说明你自己语言是图灵完备的就行了。<br>兔子学姐诚实地说道。<br>因此，判断一个语言好不好的唯一标准应当是能不能容易地实现 bf，所以，各语言的粉丝们，快来实现一个 bf 为自己喜欢的语言投上一票吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现 brainfuck 的难度是评价语言好不好的唯一标准&lt;br&gt;如果你自己造的语言，能很容易的实现一个 brainfuck，那么你就写一个 bf 来说明你自己语言是图灵完备的就行了。&lt;br&gt;兔子学姐诚实地说道。&lt;br&gt;因此，判断一个语言好不好的唯一标准应当是能不能容易地实
    
    </summary>
    
    
      <category term="Backup" scheme="https://lingsamuel.github.io/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>Nise Sarasa Kisaragi</title>
    <link href="https://lingsamuel.github.io/2017/03/14/Nise-Sarasa-Kisaragi/"/>
    <id>https://lingsamuel.github.io/2017/03/14/Nise-Sarasa-Kisaragi/</id>
    <published>2017-03-14T04:31:32.000Z</published>
    <updated>2017-03-14T04:36:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>如月更纱③</p>
<p>个人简介<br>你、你、你偷窥！（＞д＜）<br>↓↓↓<br>如果你想关注我，请千万慎重考虑，非常不建议关注。<br>本人非常能刷时间线（但逐渐弃用知乎中），主要刷如下话题:<br>游戏，计算机科学，勃学，以及一些（我的时间线上的）热点。<br>并且不输出干货，在知乎只钓鱼(实话)。</p>
<p>教育经历<br>博丽神社·茶学、妖怪退治<br>雾雨魔法店·魔炮入门、扫帚与八卦炉制作和维护<br>异典·触手学<br>世界之喉·龙吼</p>
<p>职业经历<br>博丽神社·扫地工<br>雾雨魔法店·打杂<br>异典·女仆<br>龙霄宫·守卫</p>
<p>所在行业<br>渔业</p>
<p>居住地<br>人类村落<br>博丽神社<br>魔法之森<br>湮灭·异典<br>天际省雪漫城</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如月更纱③&lt;/p&gt;
&lt;p&gt;个人简介&lt;br&gt;你、你、你偷窥！（＞д＜）&lt;br&gt;↓↓↓&lt;br&gt;如果你想关注我，请千万慎重考虑，非常不建议关注。&lt;br&gt;本人非常能刷时间线（但逐渐弃用知乎中），主要刷如下话题:&lt;br&gt;游戏，计算机科学，勃学，以及一些（我的时间线上的）热点。&lt;br&gt;
    
    </summary>
    
    
      <category term="Backup" scheme="https://lingsamuel.github.io/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>Fucking Test</title>
    <link href="https://lingsamuel.github.io/2017/03/14/Fucking-Test/"/>
    <id>https://lingsamuel.github.io/2017/03/14/Fucking-Test/</id>
    <published>2017-03-14T04:29:38.000Z</published>
    <updated>2017-03-14T04:40:33.734Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>我没说不要测试啊</p>
</li>
<li><p>测试是低效的，比完善程序低效得多</p>
</li>
<li><p>测试的作用存疑</p>
</li>
<li><p>如果测试不是作者写，第二条加重</p>
</li>
<li><p>如果测试不是作者写，第一条加重</p>
</li>
<li><p>如果测试不是作者写，作者要么是巨牛，要么就很不负责任</p>
</li>
<li><p>测试并不会比“参数检查”之类的健壮代码更能保证程序的健壮性</p>
</li>
<li><p>“参数检查”之类的代码不可避免</p>
</li>
<li><p>依赖测试意味着代码修改也依赖测试，而不是依赖代码本身</p>
</li>
<li><p>测试是不得已而为之的手段，测试应当是越少越好的</p>
</li>
<li><p>编写健壮的测试不见得比编写健壮的代码容易，有空编写健壮的测试不如编写健壮的代码</p>
</li>
<li><p>过多的外部依赖会拖慢开发速度和增加维护成本</p>
</li>
<li><p>过量的测试用来“保证代码不会被改挂或者用挂”还不如一份完善的文档</p>
</li>
<li><p>这些东西看官当个笑话看看就好，每一条都经不起推敲(只适用于部分情况，包括这条)</p>
</li>
<li><p>想到再写</p>
</li>
</ol>
<p>(蔡俊杰)[<a href="https://www.zhihu.com/people/cai-jun-jie-82/answers" target="_blank" rel="external">https://www.zhihu.com/people/cai-jun-jie-82/answers</a>]<br>我目前的经验是：脚本化测试主要用来保留重要的用例，用于以后快速回归，重构后调试和验收；测试环境的搭建远比编写用例难搞，大部分时间你会卡在用例和被测代码的运行环境上；给被测代码“包”用例前，先评估被测代码的迭代价值，不迭代不修改的代码没有被测的价值，评估不出的代码先别搞，啥时候出现“改了代码回归起来好吃力”的想法，再搞测试也不迟</p>
<p>(之乎者也)[<a href="https://www.zhihu.com/people/zhi-hu-zhe-ye-57-74-40/answers" target="_blank" rel="external">https://www.zhihu.com/people/zhi-hu-zhe-ye-57-74-40/answers</a>]<br>基本同意，测试代码，我认为可以由编写srs的人来写。不过用途有限。 特别是ui方面的，简直无法测试。 如果开发自己写单元测试。的确效果有限 开发当然知道跑出来是应该啥样的。自己写的代码嘛。大部分情况，程序运行是符合预期的。但是这个“预期”，很多情况并不和客户的“预期”是一回事。 当客户跳出了你写的不是我要的。 这就尴尬了。 要改写代码，还要该单元测试代码，否则一堆红叉叉无法交代啊。 结论，单元测试对核心库很必要。对业务层测试，那就得业务人员来写。否则写了也白写，还添乱。<br>在我看来，只有自动回归测试才有意义。因为它可以自动的一遍遍的跑。避免某单元测试通过，但是影响到其他的单元，最后系统出问题。</p>
<p>您好，您曾经在我的一篇文章下发表过较长的评论，因为现在文章已经删除，我觉得您可能想要备份您的评论，但因为我无法私信与你，所以在此评论。</p>
<p>您好，您曾经在我的一篇文章下发表过较长的评论，因为现在文章已经删除，我觉得您可能想要备份您的评论，所以私信与你。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;我没说不要测试啊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试是低效的，比完善程序低效得多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试的作用存疑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果测试不是作者写，第二条加重&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果测试不是作者写，
    
    </summary>
    
    
      <category term="Backup" scheme="https://lingsamuel.github.io/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>Dragonlang Sentence</title>
    <link href="https://lingsamuel.github.io/2017/03/14/Dragonlang-Sentence/"/>
    <id>https://lingsamuel.github.io/2017/03/14/Dragonlang-Sentence/</id>
    <published>2017-03-14T04:28:59.000Z</published>
    <updated>2017-03-14T04:29:59.395Z</updated>
    
    <content type="html"><![CDATA[<p>Dovahkiin Geh Pruzaan In Do Lo Geinmaar Mulaag Mu Funt</p>
<p>龙裔真是装逼大师，是我输了。</p>
<p>不要再使用那种欺负大家不懂龙语就瞎写的表情包了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dovahkiin Geh Pruzaan In Do Lo Geinmaar Mulaag Mu Funt&lt;/p&gt;
&lt;p&gt;龙裔真是装逼大师，是我输了。&lt;/p&gt;
&lt;p&gt;不要再使用那种欺负大家不懂龙语就瞎写的表情包了。&lt;/p&gt;

    
    </summary>
    
    
      <category term="TESV" scheme="https://lingsamuel.github.io/tags/TESV/"/>
    
      <category term="Dragonlang" scheme="https://lingsamuel.github.io/tags/Dragonlang/"/>
    
  </entry>
  
  <entry>
    <title>Another Adventure Comment</title>
    <link href="https://lingsamuel.github.io/2017/03/14/Another-Adventure-Comment/"/>
    <id>https://lingsamuel.github.io/2017/03/14/Another-Adventure-Comment/</id>
    <published>2017-03-14T04:27:30.000Z</published>
    <updated>2017-03-14T04:28:13.571Z</updated>
    
    <content type="html"><![CDATA[<p>本文同步发布于 steam 的游戏评论区。<br>结论</p>
<p>不推荐。</p>
<p>短评</p>
<p>作为一个游戏来说，这个游戏的游戏性很蹩脚。</p>
<p>作为一个有声小说来说，插入的各种解谜非常糟糕，故事性中下。</p>
<p>批评</p>
<p>这个东西显然算不上是一个能玩的游戏，所以我姑且认为作者是想做成有声小说吧。</p>
<p>过度缓慢的节奏、奇怪的解谜、生硬的讽刺，这就是这个游戏的全部。</p>
<p>如果你想把一个故事讲得更好，请删掉那些奇怪的“解谜”，这些东西不仅毫无意义，而且会消磨读者们的耐心，毕竟你这个故事并不是那么复杂，半小时足以。</p>
<p>故事的主体并不复杂。讽刺显得十分生硬、缺少波澜并且略有地图炮的嫌疑，我相信没有多少人不会中那么一两枪，所以我有一点不喜欢，这样的隐晦地图炮在我看来有哗众取宠之嫌。</p>
<p>讽刺过了头，且有歧义谬误的嫌疑。诚然，有一部分人和故事里讲的别无二致，但是我们不能否认有人就是喜欢这样的“生活”（注意是生活本身，而不是生活态度）。将故事拆开，会发现主角们的人生在某种程度上属于“自我感觉良好”与“普通人的人生”的加总。以故事的叙事来说，暗中将读者们带入了这样一个深坑：有这样人生的人，就像这些主角一样失败。并且由于选择的四个人生阶段较为明显，容易导致读者们自我代入并且认为这类人是这些人生阶段的大多数（也即：中枪感）。这就是为什么有那么多人看了之后会觉得不舒服。</p>
<p>Nocebo effect，反安慰剂效应。我个人认为，这类负能量的故事，容易引发非亲身经历者的恶意的幻想，短期内促使人的情绪悲观，放大情绪因素，使得更容易认为这类故事会是“自己的未来”。由于时间段区分明显，不同年纪的人都有可能产生这样的感觉，导致一种虚假的中枪感。</p>
<p>叙事手法并不高明。平铺直叙，硬灌毒汤，负能量从头到尾，我以为我在听形势与政策的老师讲大数据。我努力想看出点什么XX主义的味道，可是我真的看不出来啊。</p>
<p>优点</p>
<p>粤语配音。我没学过音韵学，但是我认为粤语配音比普通话更适合这个游戏。</p>
<p>可能是作者自己的经历。</p>
<p>不友善</p>
<p>在知乎上看到了一些对这个游戏的吹捧，并且对 steam 上的特别好评（918中的91%，截止6: 59 3/13/2017）很不解。</p>
<p>这个游戏的质量，我认为是配不上这个特别好评的，原因上面写了一点，过誉是无疑的。</p>
<p>显然，这个游戏既不算严肃游戏的旗帜，也不算优秀的讽刺。有趣的是，这个游戏可能真的在一定程度上反映了一部分人的生活现状，或者是一部分人对类似形态和题材的故事缺乏经验，导致了一种奇怪的结果。当然也有可能是故事太具有诱导性。</p>
<p>我不认为故事内容是恶意的营销，但是我依旧只能说三个字：不推荐。</p>
<p>如果要我说一说这游戏为什么会有被吹上天的趋势，我也许只能说：《天才在左疯子在右》怎么被吹的，这个游戏就是怎么被吹的。看完了，干了一碗/几碗毒鸡汤，因为故事心情有点激动，觉得自己发现了不得了的秘密，想都没想就给了个好评，大概是这样吧，我猜……比较惨的是，哪怕在这个故事里中了一万枪，大概也不会有什么实质改变吧。</p>
<p>购买原因</p>
<p>国产游戏没见过同类的，买来算支持一下。前三作我也玩过，挺好玩的，那会我还是高中。想不到作者现在还在制作新的游戏，挺不容易的。</p>
<p>希望作者能做出更好的游戏，或者小说，或者解决自己内心的疑惑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文同步发布于 steam 的游戏评论区。&lt;br&gt;结论&lt;/p&gt;
&lt;p&gt;不推荐。&lt;/p&gt;
&lt;p&gt;短评&lt;/p&gt;
&lt;p&gt;作为一个游戏来说，这个游戏的游戏性很蹩脚。&lt;/p&gt;
&lt;p&gt;作为一个有声小说来说，插入的各种解谜非常糟糕，故事性中下。&lt;/p&gt;
&lt;p&gt;批评&lt;/p&gt;
&lt;p&gt;这个东西
    
    </summary>
    
    
      <category term="Backup" scheme="https://lingsamuel.github.io/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>Fancy and Trivial</title>
    <link href="https://lingsamuel.github.io/2017/03/09/Fancy-and-Trivial/"/>
    <id>https://lingsamuel.github.io/2017/03/09/Fancy-and-Trivial/</id>
    <published>2017-03-09T15:59:25.000Z</published>
    <updated>2017-03-09T16:05:33.551Z</updated>
    
    <content type="html"><![CDATA[<p>一种假象。</p>
<a id="more"></a>
<p>编程的初学者往往都会陷入一个陷阱，就是迷信“做中学”。</p>
<p>我并不是说做中学不对，只是真正的做中学怕不是网上的什么教程能教会的。</p>
<p>网上的教程，往往用一些很 fancy 的例子吸引新手入门，但其实这些东西都很 trivial。</p>
<p>我可能算是走过许多弯路的了。</p>
<p>如果有人曾经看到过我的 GitHub/GitLab，会发现曾经我在上面都是一片绿/蓝，但现在我都把这些 repo 删掉了。</p>
<p>因为做的东西实在没有什么技术含量，都是很 trivial 的。比如什么知乎日报 Android 端、BBS、仿制的知乎。</p>
<p>而新手正容易被这些东西吸引。</p>
<p>现在你问我怎么入门，我可能会掏出一大叠书送给你。</p>
<p>真正有用的东西，最后还是绕不开这些经典的教材。</p>
<p>会<strong>简单使用</strong>用一些框架，其实是个民工都能做。</p>
<p>要么扎扎实实从头开始，要么就<strong>深入</strong>进去。</p>
<p>然而深入的前提是扎扎实实。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一种假象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://lingsamuel.github.io/tags/Life/"/>
    
      <category term="Misc" scheme="https://lingsamuel.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Books</title>
    <link href="https://lingsamuel.github.io/2017/01/15/Books/"/>
    <id>https://lingsamuel.github.io/2017/01/15/Books/</id>
    <published>2017-01-14T19:47:33.000Z</published>
    <updated>2017-01-14T19:52:09.183Z</updated>
    
    <content type="html"><![CDATA[<hr>
<ol>
<li>SICP</li>
<li>CSAPP</li>
<li>Learn You a Haskell in Great Good</li>
<li>Types and Programming Languages</li>
<li>Kotlin Specification</li>
</ol>
<hr>
<ol>
<li>Introduction to Lambda Calculus</li>
<li>Introduction to Algorithm</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;SICP&lt;/li&gt;
&lt;li&gt;CSAPP&lt;/li&gt;
&lt;li&gt;Learn You a Haskell in Great Good&lt;/li&gt;
&lt;li&gt;Types and Programming Languages&lt;/li&gt;
&lt;li&gt;Kotlin Specif
    
    </summary>
    
    
      <category term="Plan" scheme="https://lingsamuel.github.io/tags/Plan/"/>
    
  </entry>
  
  <entry>
    <title>Make a Lisp Step 0</title>
    <link href="https://lingsamuel.github.io/2017/01/14/Make-a-Lisp-Step-0/"/>
    <id>https://lingsamuel.github.io/2017/01/14/Make-a-Lisp-Step-0/</id>
    <published>2017-01-14T09:20:36.000Z</published>
    <updated>2017-01-14T19:35:59.828Z</updated>
    
    <content type="html"><![CDATA[<p>Make A Lisp!</p>
<a id="more"></a>
<h1 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h1><p>我们先定义几个类型，基类是 <code>Type</code>，里面的东西可以随意填充，现在只是用作参数类型，还没有什么用。<br><code>TrueType</code> 和 <code>FalseType</code> 单独拿来作一个类型纯属个人喜好（怀念 Haskell），你也可以把他作为一个常量。<br>前 7 个类型与后面的正则一一对应。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">IntegerType</div><div class="line">NilType</div><div class="line">TrueType</div><div class="line">FalseType</div><div class="line">StringType</div><div class="line">KeywordType</div><div class="line">SymbolType</div><div class="line"></div><div class="line">ListType</div></pre></td></tr></table></figure></p>
<h1 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h1><p>定义几个方法。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">read</span><span class="params">()</span></span>: String?</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(code: <span class="type">String</span>?)</span></span>: Type</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">(s: <span class="type">Type</span>)</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">rep</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p>
<p>其中，<code>rep</code> 用来调用其他三个方法。</p>
<h1 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h1><p>Mal 提供了两个正则表达式来作 tokenize。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> TOKEN_REGEX = Regex(<span class="string">"""[\s,]*(~@|[\[\]&#123;&#125;()'`~^@]|"(?:\\.|[^\\"])*"|;.*|[^\s\[\]&#123;&#125;('"`,;)]*)"""</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> PRIM_REGEX = Regex(<span class="string">"""(^-?[0-9]+$)|(^nil$)|(^true$)|(^false$)|^"(.*)"$|:(.*)|(^[^"]*$)"""</span>)</div></pre></td></tr></table></figure></p>
<p>我们把得到的 Token 放进一个 <code>TokenReader</code> 类，比如说它实际上是一个链表之类的数据结构，（至少）能够获取当前 Token 和下一个 Token。</p>
<p>加入几个方法，因为是 step 1，所以只支持 <code>form</code>, <code>list</code>, <code>primitive</code> 就行了。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readForm</span><span class="params">(reader: <span class="type">Reader</span>)</span></span>: Type</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readList</span><span class="params">(reader: <span class="type">Reader</span>)</span></span>: Type</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readPrimitive</span><span class="params">(reader: <span class="type">Reader</span>)</span></span>: Type</div></pre></td></tr></table></figure></p>
<h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p><code>Form</code> 的形式（目前）很简单，只要看看当前的 token 是不是 <code>null</code>, <code>(</code>, <code>)</code> 就行了。<br>如果是 <code>null</code>，那么就结束，如果是 <code>)</code>，就抛出一个异常（因为闭括号在 <code>readList</code> 里处理了），如果是开括号，就调用 <code>readList</code>，其他情形我们直接调用 <code>readPrimitive</code>。</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p><code>List</code> 的形式和 <code>Form</code> 类似，我们一直读入下一个 token，如果它是 <code>null</code>，那么抛出一个异常就好了，如果是 <code>)</code>，那么这个 list 就算读取完毕了，其他情形我们直接调用 <code>readForm</code>。对于每一个结束（遇到 <code>)</code>）前的 <code>Type</code>，我们就把它加入到 <code>ListType</code> 的某种数据结构中（例如链表），作为这个 Type 的值。</p>
<h2 id="PrimitiveType"><a href="#PrimitiveType" class="headerlink" title="PrimitiveType"></a>PrimitiveType</h2><p>我们只需要对 token 应用一下上面提到的那个正则表达式即可。这个正则表达式的结果是分组的，我们可以依次判断这些组的值是不是 <code>null</code>（而且应当只有一个不是 <code>null</code>）。不是 <code>null</code> 的情形即为这个 token 的基本类型。</p>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p>现在我们有一个能够正确解析很多东西的小玩具了——虽然它连算数都不会。<br>如果你的实现很好的话，它已经能正确处理换行了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Make A Lisp!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://lingsamuel.github.io/tags/Kotlin/"/>
    
      <category term="Lisp" scheme="https://lingsamuel.github.io/tags/Lisp/"/>
    
  </entry>
  
  <entry>
    <title>也许你们不知道，但 Kotlin 也像 Lisp</title>
    <link href="https://lingsamuel.github.io/2017/01/10/%E4%B9%9F%E8%AE%B8%E4%BD%A0%E4%BB%AC%E4%B8%8D%E7%9F%A5%E9%81%93%EF%BC%8C%E4%BD%86-Kotlin-%E4%B9%9F%E5%83%8F-Lisp/"/>
    <id>https://lingsamuel.github.io/2017/01/10/也许你们不知道，但-Kotlin-也像-Lisp/</id>
    <published>2017-01-09T17:10:07.000Z</published>
    <updated>2017-01-14T19:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>老文重发。<br><a id="more"></a></p>
<p><a href="https://blog.jetbrains.com/kotlin/2014/04/kotlin-gets-support-for-s-expressions/" target="_blank" rel="external">Kotlin Blog</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老文重发。&lt;br&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://lingsamuel.github.io/tags/Kotlin/"/>
    
      <category term="Lisp" scheme="https://lingsamuel.github.io/tags/Lisp/"/>
    
  </entry>
  
  <entry>
    <title>我推荐的学习方法</title>
    <link href="https://lingsamuel.github.io/2017/01/09/%E6%88%91%E6%8E%A8%E8%8D%90%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    <id>https://lingsamuel.github.io/2017/01/09/我推荐的学习方法/</id>
    <published>2017-01-09T15:07:47.000Z</published>
    <updated>2017-01-09T15:25:53.005Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，上课的效率是极度低下的，复习考试（除了数学课），对学习什么知识也基本是没用的。</p>
<p>那么正确的学习方法是什么呢？那就是自学。</p>
<p>遇到不懂的地方怎么办呢？如果思考了很久还没有弄懂的话，建议询问他人（包括搜索引擎）。如果还是感觉半懂不懂的，我建议暂时放下，以后再回头看看，往往更可能弄懂。因为这个时候你很可能陷入了误区，或者是你的知识体系还没有牢固到准备接受这块知识。至少于我而言，大部分时候我在有更多知识后回头看这些问题，发现当时没弄懂的原因都是这样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，上课的效率是极度低下的，复习考试（除了数学课），对学习什么知识也基本是没用的。&lt;/p&gt;
&lt;p&gt;那么正确的学习方法是什么呢？那就是自学。&lt;/p&gt;
&lt;p&gt;遇到不懂的地方怎么办呢？如果思考了很久还没有弄懂的话，建议询问他人（包括搜索引擎）。如果还是感觉半懂不懂的，我建议
    
    </summary>
    
    
      <category term="Misc" scheme="https://lingsamuel.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Type System</title>
    <link href="https://lingsamuel.github.io/2017/01/04/Introduction-to-Type-System/"/>
    <id>https://lingsamuel.github.io/2017/01/04/Introduction-to-Type-System/</id>
    <published>2017-01-03T17:02:11.000Z</published>
    <updated>2017-01-03T17:10:35.957Z</updated>
    
    <content type="html"><![CDATA[<p>看完你也不会有收获的类型系统笔记</p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看完你也不会有收获的类型系统笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://lingsamuel.github.io/tags/Note/"/>
    
      <category term="Type System" scheme="https://lingsamuel.github.io/tags/Type-System/"/>
    
  </entry>
  
  <entry>
    <title>Projects in Winter Vacation</title>
    <link href="https://lingsamuel.github.io/2017/01/04/Projects-in-Winter-Vacation/"/>
    <id>https://lingsamuel.github.io/2017/01/04/Projects-in-Winter-Vacation/</id>
    <published>2017-01-03T16:52:43.000Z</published>
    <updated>2017-01-03T17:03:42.568Z</updated>
    
    <content type="html"><![CDATA[<p>Flags</p>
<a id="more"></a>
<p>寒假填坑季</p>
<ol>
<li>一个卡片游戏框架</li>
<li>一个用 kotlin 造的小语言，考虑 kotlin 能操作它（它操作 kotlin 似乎有点复杂？）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flags&lt;/p&gt;
    
    </summary>
    
    
      <category term="Plan" scheme="https://lingsamuel.github.io/tags/Plan/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Tutorial Chap.0</title>
    <link href="https://lingsamuel.github.io/2017/01/04/Kotlin-Tutorial-Chap-0/"/>
    <id>https://lingsamuel.github.io/2017/01/04/Kotlin-Tutorial-Chap-0/</id>
    <published>2017-01-03T16:52:09.000Z</published>
    <updated>2017-01-03T17:03:45.661Z</updated>
    
    <content type="html"><![CDATA[<p>Getting started</p>
<a id="more"></a>
<p>据称，每一篇教程都应该有一个教你怎么配环境的章节，这个章节的阅读量是最最大的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Getting started&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://lingsamuel.github.io/tags/Kotlin/"/>
    
      <category term="Tutorial" scheme="https://lingsamuel.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Tutorial Chap.2</title>
    <link href="https://lingsamuel.github.io/2016/12/23/Kotlin-Tutorial-Chap-2/"/>
    <id>https://lingsamuel.github.io/2016/12/23/Kotlin-Tutorial-Chap-2/</id>
    <published>2016-12-23T07:23:58.000Z</published>
    <updated>2017-03-09T15:58:22.435Z</updated>
    
    <content type="html"><![CDATA[<p>Something about Variance</p>
<a id="more"></a>
<p>此文错误较多，请勿继续参考。</p>
<h1 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h1><p>类型构造时，构成类型的子类型性质可以被保持、反转或忽略，称作型变性质，型变(Variance)就是指依照某种构造的型变性质，确定复合类型的子类型关系。</p>
<blockquote>
<ul>
<li>Covariance</li>
</ul>
<p>使你能够使用比原始指定的类型派生程度更大的类型。<br>你可以向 IEnumerable<derived> 类型的变量分配 IEnumerable(Of Derived)（在 Visual Basic 中为 IEnumerable<base>）的实例。</derived></p>
<ul>
<li>Contravariance</li>
</ul>
<p>使你能够使用比原始指定的类型更泛型（派生程度更小）的类型。<br>你可以向 IEnumerable<base> 类型的变量分配 IEnumerable(Of Base)（在 Visual Basic 中为 IEnumerable<derived>）的实例。</derived></p>
<ul>
<li>Invariance</li>
</ul>
<p>这意味着，你只能使用原始指定的类型；固定泛型类型参数既不是协变类型，也不是逆变类型。<br>你无法向 IEnumerable<base> 类型的变量分配 IEnumerable(Of Base)（在 Visual Basic 中为 IEnumerable<derived>）的实例，反之亦然。</derived></p>
</blockquote>
<p>上文来自<a href="https://msdn.microsoft.com/zh-cn/library/dd799517.aspx" target="_blank" rel="external">泛型中的协变和逆变</a>，简而言之就是协变可以使用更加特化的版本，逆变可以使用更加泛化的版本。</p>
<h2 id="Covariant"><a href="#Covariant" class="headerlink" title="Covariant"></a>Covariant</h2><p>称协变(Covariant)为能保持子类型关系的型变性质。</p>
<p>例如，<code>Plate&lt;Apple&gt;</code>是<code>Plate&lt;Fruit&gt;</code>的子类型（显然装苹果的盘子也是一个装了水果的盘子），也即是说，<code>Apple</code>和<code>Fruit</code>间的子类型关系（苹果也是水果）被保持了，此时<code>Plate</code>就是协变的。</p>
<p>在 Java 里，它应该是这样的，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plate&lt;? extends Fruit&gt;</div></pre></td></tr></table></figure></p>
<p>意即任意派生自<code>Fruit</code>的类型都能作类型参数，此时它是协变的。<br>在 Java 里，这个叫做<strong>上界通配符</strong>。</p>
<h2 id="Contravariant"><a href="#Contravariant" class="headerlink" title="Contravariant"></a>Contravariant</h2><p>称逆变(Contravariant)为反转子类型关系的型变性质。</p>
<p>例如，<code>Eat&lt;Apple&gt;</code>是<code>Eat&lt;Fruit&gt;</code>的超类。此处，<code>Eat&lt;T&gt;</code>的子类型关系与<code>T</code>相比，被反转了，这就是逆变。</p>
<p>在 Java 里，它是这样的，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Eat&lt;? <span class="keyword">super</span> Apple&gt;</div></pre></td></tr></table></figure></p>
<p>意味着任何<code>Apple</code>的超类都能作类型参数，它可能是<code>Fruit</code>，或者<code>Food</code>，但必须记住，和<code>Eat</code>复合后，子类型关系被<strong>反转</strong>了。<br>在 Java 里，这个叫做<strong>下界通配符</strong>。</p>
<h2 id="Invariant"><a href="#Invariant" class="headerlink" title="Invariant"></a>Invariant</h2><p>称不变(Invariant)为忽略子类型关系的型变性质。</p>
<p>例如，<code>List&lt;Apple&gt;</code>和<code>List&lt;Fruit&gt;</code>之间没有什么子类型关系，此时就称之不变。</p>
<h2 id="合理地使用"><a href="#合理地使用" class="headerlink" title="合理地使用"></a>合理地使用</h2><p>一般来说，我们应该尽量使用协变或者逆变，而不是不变。</p>
<p>考虑不变的情形，我们有一个<code>Plate&lt;Fruit&gt;</code>，但它不能放入<code>Apple</code>，这种情形会让程序员困惑。</p>
<p>但有时候我们需要不变来保持类型安全。</p>
<p>设想一个数组<code>Fruit[]</code>，存在以下三种情形，</p>
<ul>
<li>协变： <code>Apple[]</code>也是<code>Fruit[]</code></li>
<li>逆变： <code>Fruit[]</code>也是<code>Apple[]</code></li>
<li>不变： 以上情形均不符合</li>
</ul>
<p>如果它是协变的，那么在<code>Apple[]</code>被当做<code>Fruit[]</code>后，可能会往内放入<code>Banana</code>，但这个<code>Fruit[]</code>实际上是<code>Apple[]</code>，是没法放入<code>Banana</code>的，因此协变是不安全的。</p>
<p>如果它是逆变的，在<code>Fruit[]</code>被当做<code>Apple[]</code>时，可能会取出一个<code>Banana</code>，因为这个<code>Apple[]</code>实际上是任何水果都可能出现的<code>Fruit[]</code>，因此逆变是不安全的。</p>
<p>不过，协变问题只对可变类型有影响，只要一个数据类型是不可变的(immutable)，它就不存在协变问题，也就是说协变是必然安全的。同理，我们可以发现，对于一个只写类型而言，逆变也是没有关系的；对只写函数而言，逆变也是无妨的。也就是说，协变存在写入问题，逆变存在读取问题。</p>
<p>这种情况，有一个叫做 PECS 原则的通俗化描述，也就是 Producer Extends Consumer Super，即是说生产者协变，消费者逆变。生产者不接受该类型作参数只返回其，消费者不返回该参数只接受其作参数。</p>
<p>在 Java 中，我们能在声明处使用一种叫做通配符的技术获取一个协变或者逆变的类型。这样就会导致类似<code>set</code>或者<code>get</code>出现问题。</p>
<p>在 C# 中，我们有 <code>in</code> 和 <code>out</code> 关键字可以手动控制这种规则，但默认是不变的，这会强制让使用者考虑型变带来的结果，个人认为是更好的。</p>
<h3 id="关于函数"><a href="#关于函数" class="headerlink" title="关于函数"></a>关于函数</h3><p>对于一个<code>Fruit-&gt;Fruit</code>的函数而言，用一个<code>Apple-&gt;Fruit</code>代替是安全的，<code>Apple-&gt;Fruit</code>用<code>Apple-&gt;Apple</code>替代也是安全的。这即是说，对函数而言，参数是逆变的，返回值是协变的。</p>
<p>返回值协变是安全的，例如在 Java 中，子类的方法能返回一个更特化的类型，即使子类被转为基类，因为基类的返回值更加泛化，容纳一个特化类型是允许的。<br>但是 Java 不支持参数逆变而是视作重载，这也是合理的，但应当在默认不变的基础上允许程序员让它逆变。</p>
<p>参数协变是危险（类型不安全）的，例如，在 Java 中，一个子类的一个函数，接受一个更特化的 Apple，然后子类被转为基类，并且试图传入一个 Banana 作为参数，则会引发类型错误。</p>
<hr>
<h1 id="Kotlin-的解决方案"><a href="#Kotlin-的解决方案" class="headerlink" title="Kotlin 的解决方案"></a>Kotlin 的解决方案</h1><p>回到 Kotlin 上，Kotlin 有一些特殊的技术使得一些在 Java 中不可能的代码成为可能。</p>
<h2 id="声明处型变"><a href="#声明处型变" class="headerlink" title="声明处型变"></a>声明处型变</h2><p>对于只读不写的泛型接口来说，协变安全是显然的，因此在泛型参数<code>T</code>前加关键字<code>out</code>表明它是一个 out-parameter 并且强制要求它只 return(produce) T。<code>out</code>的含义是，它只出现在 out-position，也就是返回值，也就是前面提到的 produce。<br>同理，<code>in</code>关键字就是 consume 含义。</p>
<p>称<code>in</code>与<code>out</code>为型变注解，只有类和接口的类型参数能被修饰。</p>
<p>事实上 C# 早就有这个东西了。</p>
<h2 id="类型投影"><a href="#类型投影" class="headerlink" title="类型投影"></a>类型投影</h2><h3 id="使用处型变"><a href="#使用处型变" class="headerlink" title="使用处型变"></a>使用处型变</h3><p>我们也可以对符合规则的函数参数的类型参数进行注解，称其为使用处型变。<br>例如，<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printArr</span><span class="params">(src: <span class="type">Array</span>&lt;<span class="type">out</span> <span class="type">Any</span>&gt;)</span></span>&#123; </div><div class="line">	<span class="comment">//... </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它能强制保证这个函数对<code>src</code>的使用符合 out 或 in 规则。<br>注意，其他参数（如果有）可以不受限制。</p>
<h3 id="星型投影"><a href="#星型投影" class="headerlink" title="星型投影"></a>星型投影</h3><p>有时候我们对类型参数一无所知，我们便可以使用星型投影来获得一种安全的使用方式。</p>
<p>对一个<code>interface Star&lt;out T&gt;</code>，其中<code>T</code>有上界约束<code>Upper</code>（默认是<code>Any?</code>），<code>Star&lt;*&gt;</code>代表<code>Star&lt;out Upper&gt;</code>，也就是说如果你对它的类型一无所知，你依然可以对它的上界进行安全地读取。<br>对一个<code>interface Star&lt;in T&gt;</code>，<code>Star&lt;*&gt;</code>代表<code>Star&lt;in Nothing&gt;</code>，也就是说你对类型一无所知的时候，你就无法安全地写它。<br>对一个<code>interface Star&lt;T&gt;</code>，<code>Star&lt;*&gt;</code>代表的含义根据读写情况变成上面两种情形。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Something about Variance&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://lingsamuel.github.io/tags/Kotlin/"/>
    
      <category term="Tutorial" scheme="https://lingsamuel.github.io/tags/Tutorial/"/>
    
      <category term="Variance" scheme="https://lingsamuel.github.io/tags/Variance/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Tutorial Chap.1</title>
    <link href="https://lingsamuel.github.io/2016/12/22/Kotlin-Tutorial-Chap-1/"/>
    <id>https://lingsamuel.github.io/2016/12/22/Kotlin-Tutorial-Chap-1/</id>
    <published>2016-12-22T13:59:10.000Z</published>
    <updated>2017-01-03T17:04:14.570Z</updated>
    
    <content type="html"><![CDATA[<p>Introduction to basic Kotlin</p>
<a id="more"></a>
<h1 id="What’s-Kotlin"><a href="#What’s-Kotlin" class="headerlink" title="What’s Kotlin"></a>What’s Kotlin</h1><p>Kotlin 是 JetBrains 推出的基于 JVM 的静态类型编程语言。</p>
<p>一大强推的 feature 是对 Java 的 100% 兼容，并且有 toJs 工具，就像他们自己的简介一样</p>
<blockquote>
<p>Statically typed programming language for the JVM, Android and the browser.<br>100% interoperable with Java™</p>
</blockquote>
<h1 id="Why-Kotlin"><a href="#Why-Kotlin" class="headerlink" title="Why Kotlin"></a>Why Kotlin</h1><p>给出我自己的理由。</p>
<ol>
<li>表达力强。</li>
<li>100% 兼容 Java。</li>
<li>有函数式特性。</li>
<li>避免了一些 Java 的坑。</li>
<li>Null-Safety</li>
</ol>
<p>第一点是非常明显的。作为入门语言是 Java 的人，自我了解了更多的语言（尤其是函数式语言）后，愈发难以忍受 Java 的复杂。<br>Java 是一门非常非常咸的语言，初学者很难掌握 OOP 的精髓（当然也是我个人理解的），这会导致复杂度的急剧上升，出现那种“为了 OO 而 OO”的代码，是非常难看并且难以维护的。<br>而 Kotlin 有很多的糖，表达力也是足够的，能够使代码更加简洁、清晰，易于维护。</p>
<p>第二点是最重要的一点，也是使用 Kotlin 的重要理由之一。它能完美兼容 Java，这意味着你可以慢慢迁移到 Kotlin，不顺手了可以立马切回 Java 而不用担心任何问题。并且使得 Kotlin 天生就拥有数量庞大的库。</p>
<p>第三点纯粹是写得爽。</p>
<p>第四点参考 <a href="https://kotlinlang.org/docs/reference/comparison-to-java.html" target="_blank" rel="external">Comparison to Java</a></p>
<p>第五点似乎没那么紧要，但 Null-Safety 强制作者考虑 null 情形，大部分情况下是有利的，而且因为第一点，这并不会使得你的代码长很多。</p>
<p>额外加分项：</p>
<ol>
<li><p>Kotlin 不像 Haskell 那样过分“学术”，而是和工程紧密结合的。</p>
</li>
<li><p>Kotlin 的作者们是世界上最强的一帮科学家和工程师，我相信他们的经验 XD。</p>
</li>
<li><p>我是 JetBrains 粉丝。</p>
</li>
</ol>
<h1 id="Quickstart-Basic-but-Best-Practice"><a href="#Quickstart-Basic-but-Best-Practice" class="headerlink" title="Quickstart (Basic but Best Practice)"></a>Quickstart (Basic but Best Practice)</h1><hr>
<h2 id="Semicolon-Free"><a href="#Semicolon-Free" class="headerlink" title="Semicolon Free"></a>Semicolon Free</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><p>不需要严格遵循文件夹<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> kt.intro.wherever</div><div class="line"></div><div class="line"><span class="keyword">import</span> sarasa.doc</div></pre></td></tr></table></figure></p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>Unit 或可推导的表达式函数的返回值可省略，其余时候不能省略。<br>如果函数返回值是 Unit，尽可能让它纯，并且尽可能使用表达式函数。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">func</span><span class="params">(a: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</div></pre></td></tr></table></figure></p>
<h3 id="Default-Parameters"><a href="#Default-Parameters" class="headerlink" title="Default Parameters"></a>Default Parameters</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(a: <span class="type">Int</span> = <span class="number">0</span>, b: <span class="type">String</span> = <span class="string">"example"</span>)</span></span> &#123; &#125;</div><div class="line"></div><div class="line">foo(b = <span class="string">"wow"</span>)</div></pre></td></tr></table></figure>
<h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>类型后置<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> v: <span class="built_in">Int</span> = <span class="number">1</span></div><div class="line"><span class="keyword">val</span> c: <span class="built_in">Int</span> = <span class="number">1</span> <span class="comment">// const value</span></div></pre></td></tr></table></figure></p>
<h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// comment</span></div><div class="line"><span class="comment">/* block </span></div><div class="line">	comment */</div></pre></td></tr></table></figure>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" raw </span></div><div class="line">string """</div><div class="line"></div><div class="line"><span class="string">" string "</span></div><div class="line"></div><div class="line"><span class="string">" string <span class="subst">$&#123;arr[index]&#125;</span> "</span></div><div class="line"></div><div class="line"><span class="string">" string <span class="subst">$simpleIdentifier</span> "</span></div></pre></td></tr></table></figure>
<h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><h3 id="Nullable"><a href="#Nullable" class="headerlink" title="Nullable"></a>Nullable</h3><p><code>?</code>作尾缀<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Non-null"><a href="#Non-null" class="headerlink" title="Non-null"></a>Non-null</h3><p><code>!!</code>作尾缀<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">(any: <span class="type">Any</span>)</span></span>: String!! &#123;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Null-Check"><a href="#Null-Check" class="headerlink" title="Null Check"></a>Null Check</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// x is nullable</span></div><div class="line">y = x * x <span class="comment">// yields an error because x can be null</span></div><div class="line"><span class="keyword">return</span> <span class="keyword">if</span>(x != <span class="literal">null</span>) x * x <span class="keyword">else</span> <span class="literal">null</span> <span class="comment">// safety</span></div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// x is nullable</span></div><div class="line"><span class="keyword">if</span>(x == <span class="literal">null</span>) <span class="keyword">return</span></div><div class="line">y = x * x <span class="comment">//safety</span></div></pre></td></tr></table></figure>
<p>If not null and else<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(nullableArray?.length ?: <span class="string">"empty"</span>)</div></pre></td></tr></table></figure></p>
<p>If null<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> something = nullableVar ?: <span class="keyword">throw</span> Exception()</div></pre></td></tr></table></figure></p>
<p>If not null<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nullable?.let&#123; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="Safe-Cast"><a href="#Safe-Cast" class="headerlink" title="Safe Cast"></a>Safe Cast</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maybeInt: <span class="built_in">Int</span>? = str <span class="keyword">as</span>? <span class="built_in">Int</span></div></pre></td></tr></table></figure>
<h2 id="Type-Check"><a href="#Type-Check" class="headerlink" title="Type Check"></a>Type Check</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(x <span class="keyword">is</span> <span class="built_in">Int</span>)&#123; &#125;</div></pre></td></tr></table></figure>
<h2 id="When"><a href="#When" class="headerlink" title="When"></a>When</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">when</span> (x)&#123;</div><div class="line">		<span class="number">10</span> -&gt; print(<span class="string">"10"</span>)</div><div class="line">		<span class="string">"Sarasa"</span> -&gt; print(<span class="string">"Sarasa"</span>)</div><div class="line">		<span class="keyword">is</span> <span class="built_in">Long</span> -&gt; print(<span class="string">"Long"</span>)</div><div class="line">		!<span class="keyword">is</span> String -&gt; print(<span class="string">"Not String"</span>)</div><div class="line">		<span class="keyword">else</span> -&gt; print(<span class="string">"unknown"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Collections-loop"><a href="#Collections-loop" class="headerlink" title="Collections loop"></a>Collections loop</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(something <span class="keyword">in</span> collections)&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(something <span class="keyword">in</span> collections)&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>((k, v) <span class="keyword">in</span> map)&#123; &#125;</div></pre></td></tr></table></figure>
<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(x <span class="keyword">in</span> <span class="number">1.</span>.y)&#123; &#125; </div><div class="line"></div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>)&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(x !<span class="keyword">in</span> <span class="number">1.</span>.y)&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">4</span> downTo <span class="number">1</span>)&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> step <span class="number">2</span>)&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span> step <span class="number">2</span>)&#123; &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span>)&#123; &#125; <span class="comment">//10 is excluded</span></div></pre></td></tr></table></figure>
<h2 id="Extension-Functions"><a href="#Extension-Functions" class="headerlink" title="Extension Functions"></a>Extension Functions</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">toLowerCase</span><span class="params">()</span></span> &#123; &#125;</div><div class="line"></div><div class="line"><span class="string">"UPPER CASE"</span>.toLowerCase()</div></pre></td></tr></table></figure>
<h2 id="it"><a href="#it" class="headerlink" title="it"></a>it</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">list.filter &#123; x -&gt; x &gt; <span class="number">0</span> &#125;</div><div class="line"><span class="comment">// equals</span></div><div class="line">list.filter &#123; it &gt; <span class="number">0</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> Something &#123; &#125;</div></pre></td></tr></table></figure>
<h2 id="With"><a href="#With" class="headerlink" title="With"></a>With</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">fun</span> <span class="title">f1</span><span class="params">()</span></span></div><div class="line">	<span class="function"><span class="keyword">fun</span> <span class="title">f2</span><span class="params">()</span></span></div><div class="line">	<span class="function"><span class="keyword">fun</span> <span class="title">f3</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> foo = Foo()</div><div class="line">with(foo) &#123;</div><div class="line">	f1()</div><div class="line">	<span class="keyword">for</span>(x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>)&#123;</div><div class="line">		f2()</div><div class="line">	&#125;</div><div class="line">	f3()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Generics-Basic"><a href="#Generics-Basic" class="headerlink" title="Generics (Basic)"></a>Generics (Basic)</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxedType</span>&lt;<span class="type">T</span>&gt;</span>(t: T) &#123; </div><div class="line">	<span class="keyword">var</span> Value = t</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">val</span> intBox = Box(<span class="number">1</span>) <span class="comment">// type inference</span></div><div class="line"><span class="keyword">val</span> intBox2: Box&lt;<span class="built_in">Int</span>&gt; = Box&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h3 id="Function-1"><a href="#Function-1" class="headerlink" title="Function"></a>Function</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">foo</span><span class="params">(t: <span class="type">T</span>)</span></span>: List&lt;T&gt; &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">toString</span><span class="params">()</span></span>: String &#123; &#125; <span class="comment">// extension function</span></div></pre></td></tr></table></figure>
<h3 id="Bounded-Constraints"><a href="#Bounded-Constraints" class="headerlink" title="Bounded Constraints"></a>Bounded Constraints</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T: Comparable&lt;T&gt;</span>&gt; <span class="title">sort</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123; &#125;</div></pre></td></tr></table></figure>
<h2 id="Data-Transform-Object"><a href="#Data-Transform-Object" class="headerlink" title="Data Transform Object"></a>Data Transform Object</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">DTO</span></span>(<span class="keyword">val</span> name: String)</div></pre></td></tr></table></figure>
<p>它会默认具有：</p>
<ol>
<li>getter/setter</li>
<li>equals()</li>
<li>hashCode()</li>
<li>toString()</li>
<li>copy()</li>
<li>componentN()</li>
</ol>
<p>componentN() 将在未来提及。</p>
<h1 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h1><ol>
<li>驼峰命名 <code>camelCase</code></li>
<li>类型大写开头 <code>Type</code></li>
<li>四个空格</li>
<li>public function 需要文档</li>
<li>类型前冒号后有空格 <code>name: Type</code></li>
<li>省略 Unit 如果它是返回值</li>
<li>lambda 和花括号间有空格，箭头附近有空格 <code>list.filter { x -&gt; x &gt; 10 }</code></li>
</ol>
<blockquote>
<p>End —— Kisaragi Sarasa</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Introduction to basic Kotlin&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="https://lingsamuel.github.io/tags/Kotlin/"/>
    
      <category term="Tutorial" scheme="https://lingsamuel.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Your Type Notes Chap.1</title>
    <link href="https://lingsamuel.github.io/2016/12/20/Your-Type-Notes-Chap-1/"/>
    <id>https://lingsamuel.github.io/2016/12/20/Your-Type-Notes-Chap-1/</id>
    <published>2016-12-20T11:37:21.000Z</published>
    <updated>2016-12-21T04:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>你的类型， 1: 基础推理</p>
<a id="more"></a>
<h1 id="你的类型"><a href="#你的类型" class="headerlink" title="你的类型"></a>你的类型</h1><p>原址: <a href="https://zhuanlan.zhihu.com/p/24195357" target="_blank" rel="external">你的类型, 1: 基础推理</a></p>
<blockquote>
<p>作者：Belleve<br>链接：<a href="https://zhuanlan.zhihu.com/p/24195357" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24195357</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>笔记、代码注释，不保证正确性，也不解释原理（也许有一天我会想回来解释）。</p>
<blockquote>
<p>继续上一节：上一节中，我们实现了单态类型的合一，而多态类型，此处即指加有的类型，在实现中，我们把这些变量用一个 Set 存储：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToNumberingScheme</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> baseChar = (<span class="string">"a"</span>).charCodeAt(<span class="number">0</span>);</div><div class="line">	<span class="keyword">let</span> letters = <span class="string">""</span>;</div><div class="line"></div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		number -= <span class="number">1</span>;</div><div class="line">		letters = <span class="built_in">String</span>.fromCharCode(baseChar + (number % <span class="number">26</span>)) + letters;</div><div class="line">		number = (number / <span class="number">26</span>) &gt;&gt; <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">while</span> (number &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> letters;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Polymorphic</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(quantifier, base) &#123;</div><div class="line">		<span class="comment">// Rename quantified slots</span></div><div class="line">		<span class="keyword">let</span> N = <span class="number">1</span>;</div><div class="line">		<span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">		<span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> quantifier) &#123;</div><div class="line">			<span class="keyword">let</span> param = slot(convertToNumberingScheme(N));</div><div class="line">			m.set(key, param);</div><div class="line">			s.add(param);</div><div class="line">			N++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.quantifier = s;</div><div class="line">		<span class="keyword">this</span>.base = base.applySub(m);</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">let</span> buf = <span class="string">"forall"</span>.red.bold;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.quantifier) &#123;</div><div class="line">			buf += <span class="string">" "</span> + item.inspect();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> buf + <span class="string">". "</span> + <span class="keyword">this</span>.base.inspect();</div><div class="line">	&#125;</div><div class="line">	instance(gen) &#123;</div><div class="line">		<span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="keyword">this</span>.quantifier) &#123;</div><div class="line">			m.set(key, gen());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.base.applySub(m);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在此处我们定义一个 instance 方法，它将多态类型的量化部分进行替换，生成一个单态的类型。</p>
<p>在前一节的 unify 中，我们还需要保证：当变量 a 合一到类型 b 的时候，b 中不能包含 a。我们用一个 freeFrom 方法实现：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A monomorphic type</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	getFreeSlots(m, a) &#123;&#125; <span class="comment">// Put free type variables, from mapping m, to set a</span></div><div class="line">	freeFrom(s) &#123;&#125; <span class="comment">// type t is free freom slot s</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Slots for free variables</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slot</span> <span class="keyword">extends</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	getFreeSlots(m, a) &#123;</div><div class="line">		<span class="keyword">if</span> (!m.has(<span class="keyword">this</span>) &amp;&amp; !a.has(<span class="keyword">this</span>)) a.add(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line">	freeFrom(s) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span> !== s;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Primitive types</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Primitive</span> <span class="keyword">extends</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	freeFrom(s) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Composite types, like [(-&gt;) a b] or [List a]</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	getFreeSlots(m, a) &#123;</div><div class="line">		<span class="keyword">this</span>.ctor.getFreeSlots(m, a);</div><div class="line">		<span class="keyword">this</span>.argument.getFreeSlots(m, a);</div><div class="line">	&#125;</div><div class="line">	freeFrom(s) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.ctor.freeFrom(s) &amp;&amp; <span class="keyword">this</span>.argument.freeFrom(s);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">在合一的时候，检查是否成环：如果成环，表示无法合一（因为我们不打算实现递归类型）</div><div class="line"></div><div class="line"><span class="comment">// Unify two monomorphic types, p and q with slot mapping m.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unify</span>(<span class="params">m, s, t</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (s <span class="keyword">instanceof</span> Slot &amp;&amp; t <span class="keyword">instanceof</span> Slot &amp;&amp; s.applySub(m).equalTo(t.applySub(m))) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Primitive &amp;&amp; t <span class="keyword">instanceof</span> Primitive &amp;&amp; s.name === t.name &amp;&amp; s.kind === t.kind) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Composite &amp;&amp; t <span class="keyword">instanceof</span> Composite) &#123;</div><div class="line">		<span class="keyword">return</span> unify(m, s.ctor, t.ctor) &amp;&amp; unify(m, s.argument, t.argument);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Slot) &#123;</div><div class="line">		<span class="keyword">let</span> t1 = t.applySub(m);</div><div class="line">		<span class="keyword">if</span> (t1.freeFrom(s)) &#123;</div><div class="line">			m.set(s, t1);</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> Slot) &#123;</div><div class="line">		<span class="keyword">let</span> s1 = s.applySub(m);</div><div class="line">		<span class="keyword">if</span> (s1.freeFrom(t)) &#123;</div><div class="line">			m.set(t, s1);</div><div class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>有了这些准备我们就可以去写类型推理了。在此处，推理规则如下：</p>
<p>对于全局的函数定义 function f x = body，我们可以先在一个次级作用域中，将 f 的类型设置为 ，x 的类型设置为，然后推导 body 的类型。如果可以成功推导，就提取处的自由变量，然后在 f 所在的作用域，将之定义。<br>对于嵌套函数定义，因为它可能会依赖外面的变量，而且这些「外面」变量的类型很可能也含有自由变量，典型例子是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function map f = let</div><div class="line">    function g a = if (empty? a)</div><div class="line">        newlist 0</div><div class="line">        cons (f (car a)) (map f (cdr a))</div><div class="line">    in g</div></pre></td></tr></table></figure></p>
<p>里面的 g，它依赖外部的 f，而 f 的类型则包含了自由变量。所以对于这些嵌套，它们需要按照相同的方式推理其类型，但是不能设置为多态。这个就是 Hindley-Milner 类型系统中最著名的 Let 多态限制。Lambda 将实现为一个 let。<br>对于函数调用 f x，我们首先推理 f 和 x 的类型 tf 与 tx，接着检查两组合一性：tf 是否和 s → t 合一 以及 tx 是否和 s 合一。如果都成立，我们就将表达式 f x 的类型推理为 t。<br>对于变量 x，返回其类型。如果它是多态的，那么就原位实例化之。<br>首先定义一个环境，它用来表示作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Environment</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(parent) &#123;</div><div class="line">		<span class="keyword">this</span>.parent = parent;</div><div class="line">		<span class="keyword">this</span>.variables = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">		<span class="keyword">this</span>.typeslots = parent ? parent.typeslots : <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">	&#125;</div><div class="line">	lookup(name) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.variables.has(name)) <span class="keyword">return</span> <span class="keyword">this</span>.variables.get(name);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.parent) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>.parent.lookup(name);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>「环境」中，我们有一个程序变量表和一个类型变量表，后者是全局的，前者每一层 Environment 分别定义。</p>
<p>对变量表达式而言，实现很简单：查找变量表，返回其类型；如果是多态的，实例化之</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">	inspect() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Id</span> <span class="keyword">extends</span> <span class="title">Form</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(name) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	inference(env) &#123;</div><div class="line">		<span class="keyword">const</span> r = env.lookup(<span class="keyword">this</span>.name);</div><div class="line">		<span class="keyword">if</span> (!r) <span class="keyword">throw</span> <span class="keyword">new</span> VariableNotFoundError(<span class="keyword">this</span>.name);</div><div class="line">		<span class="keyword">if</span> (r <span class="keyword">instanceof</span> type.Polymorphic) &#123;</div><div class="line">			<span class="keyword">return</span> r.instance(newtype);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> r;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>对函数调用而言，进行两次合一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apply</span> <span class="keyword">extends</span> <span class="title">Form</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(p, q) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.fn = p;</div><div class="line">		<span class="keyword">this</span>.argument = q;</div><div class="line">	&#125;</div><div class="line">	inference(env) &#123;</div><div class="line">		<span class="keyword">const</span> tfn = <span class="keyword">this</span>.fn.inference(env).applySub(env.typeslots);</div><div class="line">		<span class="keyword">const</span> targ = <span class="keyword">this</span>.argument.inference(env).applySub(env.typeslots);</div><div class="line"></div><div class="line">		<span class="keyword">const</span> s = newtype();</div><div class="line">		<span class="keyword">const</span> t = newtype();</div><div class="line">		<span class="keyword">const</span> psuidoArrow = type.arrow(s, t);</div><div class="line">		<span class="keyword">if</span> (!type.unify(env.typeslots, psuidoArrow, tfn)) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Type of <span class="subst">$&#123;<span class="keyword">this</span>.fn.inspect()&#125;</span> is not a function : <span class="subst">$&#123;tfn.applySub(env.typeslots).inspect()&#125;</span>`</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">const</span> targ1 = s.applySub(env.typeslots);</div><div class="line">		<span class="keyword">if</span> (!type.unify(env.typeslots, targ1, targ)) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> TypeIncompatibleError(</div><div class="line">				<span class="keyword">this</span>.argument,</div><div class="line">				targ1.applySub(env.typeslots),</div><div class="line">				targ.applySub(env.typeslots),</div><div class="line">				<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">const</span> tresult = t.applySub(env.typeslots);</div><div class="line">		<span class="keyword">return</span> tresult;</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">if</span> (!(<span class="keyword">this</span>.argument <span class="keyword">instanceof</span> Id)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.fn.inspect() + <span class="string">" ("</span> + <span class="keyword">this</span>.argument.inspect() + <span class="string">")"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.fn.inspect() + <span class="string">" "</span> + <span class="keyword">this</span>.argument.inspect();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>对函数定义而言，需要一个额外的 local 属性，表示其是否是嵌套的；如果是，则返回单态的结果</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FDef</span> <span class="keyword">extends</span> <span class="title">Form</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(name, p, q, local) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.parameter = p;</div><div class="line">		<span class="keyword">this</span>.body = q;</div><div class="line">		<span class="keyword">this</span>.local = !!local;</div><div class="line">	&#125;</div><div class="line">	inference(env) &#123;</div><div class="line">		<span class="keyword">const</span> e = <span class="keyword">new</span> Environment(env);</div><div class="line">		<span class="keyword">const</span> alpha = newtype(<span class="string">"A"</span>);</div><div class="line">		<span class="keyword">const</span> beta = newtype(<span class="string">"B"</span>);</div><div class="line">		<span class="keyword">const</span> fntype0 = type.arrow(alpha, beta);</div><div class="line">		e.variables.set(<span class="keyword">this</span>.parameter.name, alpha);</div><div class="line">		e.variables.set(<span class="keyword">this</span>.name, type.arrow(alpha, beta));</div><div class="line">		e.typeslots.set(beta, <span class="keyword">this</span>.body.inference(e));</div><div class="line">		<span class="keyword">const</span> fnType = fntype0.applySub(e.typeslots);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.local) &#123;</div><div class="line">			env.variables.set(<span class="keyword">this</span>.name, fnType);</div><div class="line">			<span class="keyword">return</span> fnType;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">const</span> fsm = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">			fnType.getFreeSlots(e.typeslots, fsm);</div><div class="line">			<span class="keyword">const</span> polytype = <span class="keyword">new</span> type.Polymorphic(fsm, fnType);</div><div class="line">			env.variables.set(<span class="keyword">this</span>.name, polytype);</div><div class="line">			<span class="keyword">return</span> polytype.instance(newtype);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"function "</span> + <span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.parameter.inspect() + <span class="string">" = "</span> + <span class="keyword">this</span>.body.inspect();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>最后一个是简单的「赋值」</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Assign</span> <span class="keyword">extends</span> <span class="title">Form</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(name, p) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.argument = p;</div><div class="line">	&#125;</div><div class="line">	inference(env) &#123;</div><div class="line">		<span class="keyword">const</span> t = <span class="keyword">this</span>.argument.inference(env);</div><div class="line">		env.variables.set(<span class="keyword">this</span>.name, t);</div><div class="line">		<span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"set "</span> + <span class="keyword">this</span>.name + <span class="string">" = "</span> + <span class="keyword">this</span>.argument.inspect();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>到此为止，HM 推理的核心部分就构建完成了，下面是一些示例：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> env = <span class="keyword">new</span> Environment(<span class="literal">null</span>);</div><div class="line"><span class="comment">// This is a prelude</span></div><div class="line"><span class="comment">// call : forall a b. (a -&gt; b) -&gt; a -&gt; b;</span></div><div class="line">env.variables.set(<span class="string">"call"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>), type.slot(<span class="string">"b"</span>)]),</div><div class="line">		type.arrow(type.arrow(type.slot(<span class="string">"a"</span>), type.slot(<span class="string">"b"</span>)), type.arrow(type.slot(<span class="string">"a"</span>), type.slot(<span class="string">"b"</span>)))</div><div class="line">	));</div><div class="line"><span class="comment">// seq : forall a b. a -&gt; b -&gt; b</span></div><div class="line">env.variables.set(<span class="string">"seq"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>), type.slot(<span class="string">"b"</span>)]),</div><div class="line">		type.arrow(type.slot(<span class="string">"a"</span>), type.arrow(type.slot(<span class="string">"b"</span>), type.slot(<span class="string">"b"</span>)))</div><div class="line">	));</div><div class="line"><span class="comment">// car : forall a. list a -&gt; a</span></div><div class="line">env.variables.set(<span class="string">"car"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>)]),</div><div class="line">		type.arrow(type.cmpt(type.prim(<span class="string">"list"</span>), type.slot(<span class="string">"a"</span>)), type.slot(<span class="string">"a"</span>))</div><div class="line">	));</div><div class="line"><span class="comment">// cdr : forall a. list a -&gt; list a</span></div><div class="line">env.variables.set(<span class="string">"cdr"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>)]),</div><div class="line">		type.arrow(type.cmpt(type.prim(<span class="string">"list"</span>), type.slot(<span class="string">"a"</span>)), type.cmpt(type.prim(<span class="string">"list"</span>), type.slot(<span class="string">"a"</span>)))</div><div class="line">	));</div><div class="line"><span class="comment">// cons : forall a. a -&gt; list a -&gt; list a</span></div><div class="line">env.variables.set(<span class="string">"cons"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>)]),</div><div class="line">		type.arrow(</div><div class="line">			type.slot(<span class="string">"a"</span>),</div><div class="line">			type.arrow(</div><div class="line">				type.cmpt(type.prim(<span class="string">"list"</span>), type.slot(<span class="string">"a"</span>)),</div><div class="line">				type.cmpt(type.prim(<span class="string">"list"</span>), type.slot(<span class="string">"a"</span>))))</div><div class="line">	));</div><div class="line"><span class="comment">// newlist : forall a. unit -&gt; list a</span></div><div class="line">env.variables.set(<span class="string">"newlist"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>)]),</div><div class="line">		type.arrow(</div><div class="line">			type.prim(<span class="string">"unit"</span>),</div><div class="line">			type.cmpt(type.prim(<span class="string">"list"</span>), type.slot(<span class="string">"a"</span>)))</div><div class="line">	));</div><div class="line"><span class="comment">// empty? : forall a. list a -&gt; bool</span></div><div class="line">env.variables.set(<span class="string">"empty?"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>)]),</div><div class="line">		type.arrow(type.cmpt(type.prim(<span class="string">"list"</span>), type.slot(<span class="string">"a"</span>)), type.prim(<span class="string">"bool"</span>))</div><div class="line">	));</div><div class="line"><span class="comment">// 0 and 1</span></div><div class="line">env.variables.set(<span class="string">"0"</span>, type.prim(<span class="string">"int"</span>));</div><div class="line">env.variables.set(<span class="string">"1"</span>, type.prim(<span class="string">"int"</span>));</div><div class="line">env.variables.set(<span class="string">"nothing"</span>, type.prim(<span class="string">"unit"</span>));</div><div class="line"><span class="comment">// +</span></div><div class="line">env.variables.set(<span class="string">"+"</span>,</div><div class="line">	type.arrow(type.prim(<span class="string">"int"</span>),</div><div class="line">		type.arrow(type.prim(<span class="string">"int"</span>), type.prim(<span class="string">"int"</span>))));</div><div class="line"><span class="comment">// if : forall a. bool -&gt; thunk a -&gt; thunk a -&gt; a</span></div><div class="line">env.variables.set(<span class="string">"if"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>)]),</div><div class="line">		type.arrow(type.prim(<span class="string">"bool"</span>),</div><div class="line">			type.arrow(type.cmpt(type.prim(<span class="string">"thunk"</span>), type.slot(<span class="string">"a"</span>)),</div><div class="line">				type.arrow(type.cmpt(type.prim(<span class="string">"thunk"</span>), type.slot(<span class="string">"a"</span>)), type.slot(<span class="string">"a"</span>))))));</div><div class="line"><span class="comment">// hold : forall a. a -&gt; thunk a</span></div><div class="line">env.variables.set(<span class="string">"hold"</span>,</div><div class="line">	<span class="keyword">new</span> type.Polymorphic(</div><div class="line">		<span class="keyword">new</span> <span class="built_in">Set</span>([type.slot(<span class="string">"a"</span>)]),</div><div class="line">		type.arrow(type.slot(<span class="string">"a"</span>),</div><div class="line">			type.cmpt(type.prim(<span class="string">"thunk"</span>), type.slot(<span class="string">"a"</span>)))));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">translate</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (a <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (a[<span class="number">0</span>] === <span class="string">"function"</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> FDef(a[<span class="number">1</span>], translate(a[<span class="number">2</span>]), translate(a[<span class="number">3</span>]));</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">0</span>] === <span class="string">"let"</span> &amp;&amp; a.length === <span class="number">3</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Assign(a[<span class="number">1</span>], translate(a[<span class="number">2</span>]));</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">0</span>] === <span class="string">"letf"</span> &amp;&amp; a.length === <span class="number">4</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> FDef(a[<span class="number">1</span>], translate(a[<span class="number">2</span>]), translate(a[<span class="number">3</span>]), <span class="literal">true</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">0</span>] === <span class="string">"lambda"</span>) &#123;</div><div class="line">			<span class="keyword">const</span> t = newvar();</div><div class="line">			<span class="keyword">return</span> translate([<span class="string">"seq"</span>, [<span class="string">"letf"</span>, t, a[<span class="number">1</span>], a[<span class="number">2</span>]], t]);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[<span class="number">0</span>] === <span class="string">"begin"</span>) &#123;</div><div class="line">			<span class="keyword">return</span> translate(a.slice(<span class="number">1</span>).reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> [<span class="string">"seq"</span>, x, y]));</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length === <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Apply(translate(a[<span class="number">0</span>]), translate(a[<span class="number">1</span>]));</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Apply(translate(a.slice(<span class="number">0</span>, a.length - <span class="number">1</span>)), translate(a[a.length - <span class="number">1</span>]));</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Id(a);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> f_id = translate(</div><div class="line">	[<span class="string">"function"</span>, <span class="string">"crz"</span>, <span class="string">"x"</span>, [<span class="string">"seq"</span>,</div><div class="line">		[<span class="string">"letf"</span>, <span class="string">"crz1"</span>, <span class="string">"y"</span>, [<span class="string">"seq"</span>,</div><div class="line">			[<span class="string">"letf"</span>, <span class="string">"crz2"</span>, <span class="string">"z"</span>,</div><div class="line">				[<span class="string">"seq"</span>, <span class="string">"x"</span>, [<span class="string">"seq"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>]]],</div><div class="line">			<span class="string">"crz2"</span>]</div><div class="line">		],</div><div class="line">		<span class="string">"crz1"</span>]]);</div><div class="line"><span class="keyword">const</span> f_length = translate(</div><div class="line">	[<span class="string">"function"</span>, <span class="string">"length"</span>, <span class="string">"a"</span>,</div><div class="line">		[<span class="string">"if"</span>, [<span class="string">"empty?"</span>, <span class="string">"a"</span>],</div><div class="line">			[<span class="string">"hold"</span>, <span class="string">"0"</span>],</div><div class="line">			[<span class="string">"hold"</span>, [<span class="string">"+"</span>, <span class="string">"1"</span>, [<span class="string">"length"</span>, [<span class="string">"cdr"</span>, <span class="string">"a"</span>]]]]]]);</div><div class="line"><span class="keyword">const</span> f_sum = translate(</div><div class="line">	[<span class="string">"function"</span>, <span class="string">"sum"</span>, <span class="string">"a"</span>,</div><div class="line">		[<span class="string">"if"</span>, [<span class="string">"empty?"</span>, <span class="string">"a"</span>],</div><div class="line">			[<span class="string">"hold"</span>, <span class="string">"0"</span>],</div><div class="line">			[<span class="string">"hold"</span>, [<span class="string">"+"</span>, [<span class="string">"car"</span>, <span class="string">"a"</span>], [<span class="string">"sum"</span>, [<span class="string">"cdr"</span>, <span class="string">"a"</span>]]]]]]);</div><div class="line"><span class="keyword">const</span> f_map = translate(</div><div class="line">	[<span class="string">"function"</span>, <span class="string">"map"</span>, <span class="string">"f"</span>, [<span class="string">"begin"</span>,</div><div class="line">		[<span class="string">"lambda"</span>, <span class="string">"a"</span>, [<span class="string">"if"</span>, [<span class="string">"empty?"</span>, <span class="string">"a"</span>],</div><div class="line">			[<span class="string">"hold"</span>, [<span class="string">"newlist"</span>, <span class="string">"nothing"</span>]],</div><div class="line">			[<span class="string">"hold"</span>, [<span class="string">"cons"</span>,</div><div class="line">				[<span class="string">"f"</span>, [<span class="string">"car"</span>, <span class="string">"a"</span>]],</div><div class="line">				[<span class="string">"map"</span>, <span class="string">"f"</span>, [<span class="string">"cdr"</span>, <span class="string">"a"</span>]]]]]]]]);</div><div class="line"></div><div class="line"><span class="keyword">const</span> foo = translate(</div><div class="line">	[<span class="string">"function"</span>, <span class="string">"foo"</span>, <span class="string">"f"</span>,</div><div class="line">		[<span class="string">"f"</span>, <span class="string">"+"</span>, [<span class="string">"f"</span>, <span class="string">"0"</span>], [<span class="string">"f"</span>, <span class="string">"1"</span>]]]);</div><div class="line"></div><div class="line">f_id.inference(env);</div><div class="line">f_length.inference(env);</div><div class="line">f_sum.inference(env);</div><div class="line">f_map.inference(env);</div><div class="line"><span class="comment">// foo.inference(env); // Should be an error</span></div><div class="line"><span class="built_in">console</span>.log(env.variables);</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果是：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Map &#123;</div><div class="line">  'call' =&gt; forall 'a 'b. ('a -&gt; 'b) -&gt; 'a -&gt; 'b,</div><div class="line">  'seq' =&gt; forall 'a 'b. 'a -&gt; 'b -&gt; 'b,</div><div class="line">  'car' =&gt; forall 'a. (list 'a) -&gt; 'a,</div><div class="line">  'cdr' =&gt; forall 'a. (list 'a) -&gt; list 'a,</div><div class="line">  'cons' =&gt; forall 'a. 'a -&gt; (list 'a) -&gt; list 'a,</div><div class="line">  'newlist' =&gt; forall 'a. unit -&gt; list 'a,</div><div class="line">  'empty?' =&gt; forall 'a. (list 'a) -&gt; bool,</div><div class="line">  '0' =&gt; int,</div><div class="line">  '1' =&gt; int,</div><div class="line">  'nothing' =&gt; unit,</div><div class="line">  '+' =&gt; int -&gt; int -&gt; int,</div><div class="line">  'if' =&gt; forall 'a. bool -&gt; (thunk 'a) -&gt; (thunk 'a) -&gt; 'a,</div><div class="line">  'hold' =&gt; forall 'a. 'a -&gt; thunk 'a,</div><div class="line">  'crz' =&gt; forall 'a 'b 'c. 'a -&gt; 'b -&gt; 'c -&gt; 'c,</div><div class="line">  'length' =&gt; forall 'a. (list 'a) -&gt; int,</div><div class="line">  'sum' =&gt; forall. (list int) -&gt; int,</div><div class="line">  'map' =&gt; forall 'a 'b. ('a -&gt; 'b) -&gt; (list 'a) -&gt; list 'b &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在之后的章节里我们将会尝试把类型推理改成 Monadic 的，并希望借此实现加法多态的推理；此外也会实现对于 AST 的 tagging。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你的类型， 1: 基础推理&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://lingsamuel.github.io/tags/Note/"/>
    
      <category term="Your Type" scheme="https://lingsamuel.github.io/tags/Your-Type/"/>
    
  </entry>
  
  <entry>
    <title>Your Type Notes Chap.0</title>
    <link href="https://lingsamuel.github.io/2016/12/20/Your-Type-Notes-Chap-0/"/>
    <id>https://lingsamuel.github.io/2016/12/20/Your-Type-Notes-Chap-0/</id>
    <published>2016-12-20T11:35:39.000Z</published>
    <updated>2016-12-20T16:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>你的类型， 0: 基本的合一</p>
<a id="more"></a>
<h1 id="你的类型"><a href="#你的类型" class="headerlink" title="你的类型"></a>你的类型</h1><p>原址: <a href="https://zhuanlan.zhihu.com/p/24181997" target="_blank" rel="external">你的类型, 0: 基本的合一</a></p>
<blockquote>
<p>作者：Belleve<br>链接：<a href="https://zhuanlan.zhihu.com/p/24181997" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24181997</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>笔记、代码注释，不保证正确性，也不解释原理（也许有一天我会想回来解释）。</p>
<p>第零章真的特别简单。</p>
<hr>
<blockquote>
<p>简单粗暴的开始：用 JS 实现一个 ML 类的程序语言的类型推理系统。<br>在我们这里，所有的类型属于以下形式之一：</p>
<p>一个基础类型（Primitive）<br>一个自由变量（Slot）<br>一个复合类型（Composite），由一个构造器（ctor）和一个参数（argument）复合得到。对于 (-&gt;)、(*) 之类的二元构造器，使用 Curryize 将他变换为嵌套的 Composite。</p>
</blockquote>
<p>无需笔记。</p>
<hr>
<blockquote>
<p>所谓的合一，指的是：给出两个类型 A 和 B，找到一组变量替换，使得两者的自由变量经过替换之后可以得到一个相同的类型 C。考虑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A = ((α → β) × [γ]) → [β]， B = ((γ → δ) × [γ]) → ε</div></pre></td></tr></table></figure></p>
<p>这两个类型可以合一，对应的替换是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">〈α → α, β → β, γ → α, δ → β, ε → [β]〉</div></pre></td></tr></table></figure></p>
</blockquote>
<p>无需笔记。</p>
<hr>
<blockquote>
<p>实现合一的算法基本思路就是维护一个 slot 的映射。对于任意的类型 a 和 b，以及「当前状态」的映射 m：</p>
<p>如果 a 和 b 都是 slot 并且 m[a] == m[b]，那么 a b 可以合一，m 不变。<br>如果 a 和 b 都是 primitive 并且相同，那么 a b 可以合一，m 不变。<br>如果 a 是 slot，可以合一，并且需要 m[a] 设置为 b；反之亦然。<br>如果 a 和 b 都是 composite，检查两者的构造器和参数是否都能合一，m 会最多被设置两次。<br>对于其他一切情况，a 和 b 不能合一。</p>
</blockquote>
<hr>
<p>这份代码是做这件事情的：<br>制造几个类型，应用 <code>unify</code> 生成一个合一替换，对这些类型应用这个替换。<br><code>applySub</code> 函数是对某一类型应用这个合一替换的。<br>该合一替换在 js 中体现为一个 map。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// A monomorphic type</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">	inspect() &#123;&#125; <span class="comment">// Pretty print type</span></div><div class="line">	applySub(m) &#123;&#125; <span class="comment">// Apply a substitution m</span></div><div class="line">	equalTo(t) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义了单态，没有什么特别的。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Slots for free variables</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slot</span> <span class="keyword">extends</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(name) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"#"</span> + <span class="keyword">this</span>.name;</div><div class="line">	&#125;</div><div class="line">	applySub(m) &#123;</div><div class="line">		<span class="keyword">const</span> r = m.get(<span class="keyword">this</span>);</div><div class="line">		<span class="keyword">if</span> (!r || r === <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		<span class="keyword">return</span> r.applySub(m);</div><div class="line">	&#125;</div><div class="line">	equalTo(t) &#123;</div><div class="line">		<span class="keyword">return</span> t &amp;&amp; t <span class="keyword">instanceof</span> Slot &amp;&amp; <span class="keyword">this</span>.name === t.name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="applySub"><a href="#applySub" class="headerlink" title="applySub"></a>applySub</h2><p><code>if (!r || r === this) return this;</code> 代表 a → a。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Primitive types</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Primitive</span> <span class="keyword">extends</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(name, kind) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">	&#125;</div><div class="line">	applySub(m) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">	equalTo(t) &#123;</div><div class="line">		<span class="keyword">return</span> t &amp;&amp; t <span class="keyword">instanceof</span> Primitive &amp;&amp; <span class="keyword">this</span>.name === t.name;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为是基本类型，所以直接原样返回就行了。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Composite types, like [(-&gt;) a b] or [List a]</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Monomorphic</span> </span>&#123;</div><div class="line">	<span class="keyword">constructor</span>(ctor, argument) &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.ctor = ctor;</div><div class="line">		<span class="keyword">this</span>.argument = argument;</div><div class="line">	&#125;</div><div class="line">	inspect() &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.argument <span class="keyword">instanceof</span> Composite) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.ctor.inspect() + <span class="string">" ("</span> + <span class="keyword">this</span>.argument.inspect() + <span class="string">")"</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.ctor.inspect() + <span class="string">" "</span> + <span class="keyword">this</span>.argument.inspect() + <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	applySub(m) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Composite(<span class="keyword">this</span>.ctor.applySub(m), <span class="keyword">this</span>.argument.applySub(m));</div><div class="line">	&#125;</div><div class="line">	equalTo(t) &#123;</div><div class="line">		<span class="keyword">return</span> t &amp;&amp; t <span class="keyword">instanceof</span> Composite &amp;&amp; <span class="keyword">this</span>.ctor.equalTo(t.ctor) &amp;&amp; <span class="keyword">this</span>.argument.equalTo(t.argument);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="applySub-1"><a href="#applySub-1" class="headerlink" title="applySub"></a>applySub</h2><p>由于柯里化， <code>ctor</code> 也应当能被执行合一。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Unify two monomorphic types, p and q with slot mapping m.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unify</span>(<span class="params">m, s, t</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (s <span class="keyword">instanceof</span> Slot &amp;&amp; t <span class="keyword">instanceof</span> Slot &amp;&amp; s.applySub(m).equalTo(t.applySub(m))) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Primitive &amp;&amp; t <span class="keyword">instanceof</span> Primitive &amp;&amp; s.name === t.name &amp;&amp; s.kind === t.kind) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Composite &amp;&amp; t <span class="keyword">instanceof</span> Composite) &#123;</div><div class="line">		<span class="keyword">return</span> unify(m, s.ctor, t.ctor) &amp;&amp; unify(m, s.argument, t.argument);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Slot) &#123;</div><div class="line">		m.set(s, t);</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> Slot) &#123;</div><div class="line">		m.set(t, s);</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法就是对 1~5 的一一对应。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Slot symbol table</span></div><div class="line"><span class="keyword">let</span> st = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">slot</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (st[name])<span class="keyword">return</span> st[name];</div><div class="line">	<span class="keyword">const</span> t = <span class="keyword">new</span> Slot(name);</div><div class="line">	st[name] = t;</div><div class="line">	<span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Primitive symbol table</span></div><div class="line"><span class="keyword">let</span> pt = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pm</span>(<span class="params">name, kind</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (pt[name])<span class="keyword">return</span> pt[name];</div><div class="line">	<span class="keyword">const</span> t = <span class="keyword">new</span> Primitive(name, kind);</div><div class="line">	pt[name] = t;</div><div class="line">	<span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Composite types</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ct</span>(<span class="params">ctor, argument</span>) </span>&#123;</div><div class="line">	<span class="keyword">const</span> t = <span class="keyword">new</span> Composite(ctor, argument);</div><div class="line">	<span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrow</span>(<span class="params">p, q</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> ct(ct(pm(<span class="string">"[-&gt;]"</span>), p), q);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">product</span>(<span class="params">p, q</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> ct(ct(pm(<span class="string">"[*]"</span>), p), q);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="slot-pm"><a href="#slot-pm" class="headerlink" title="slot/pm"></a>slot/pm</h1><p>仅仅是往自由变量/基本类型里加东西并返回而已。</p>
<h1 id="ct"><a href="#ct" class="headerlink" title="ct"></a>ct</h1><p>仅仅是构造一个 <code>Composite</code> 而已。</p>
<h1 id="arrow-product"><a href="#arrow-product" class="headerlink" title="arrow/product"></a>arrow/product</h1><p>手动柯里化，最后的结果是 <code>[-&gt;] p q</code> / <code>[*] p q</code>。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> type1 =</div><div class="line">arrow(</div><div class="line">	product(</div><div class="line">  		arrow(slot(<span class="string">"a1"</span>), slot(<span class="string">"a2"</span>)),</div><div class="line">  		ct(pm(<span class="string">"list"</span>), slot(<span class="string">"a3"</span>))),</div><div class="line">  ct(pm(<span class="string">"list"</span>), slot(<span class="string">"a2"</span>)));</div></pre></td></tr></table></figure>
<p>它制造的类型是 <code>-&gt; (* (-&gt; a1 a2) (list a3)) (list a2)</code>。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> type2 =</div><div class="line">arrow(</div><div class="line">	product(</div><div class="line">  		arrow(slot(<span class="string">"a3"</span>), slot(<span class="string">"a4"</span>)),</div><div class="line">  		ct(pm(<span class="string">"list"</span>), slot(<span class="string">"a3"</span>))),</div><div class="line">  slot(<span class="string">"a5"</span>));</div></pre></td></tr></table></figure>
<p>它制造的类型是 <code>-&gt; (* (-&gt; a3 a4) (list a3)) a5</code>。</p>
<hr>
<p>为直观理解，现手动分析 <code>unify</code> 这一过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-&gt; (* (-&gt; a1 a2) (list a3)) (list a2) unify -&gt; (* (-&gt; a3 a4) (list a3)) a5</div><div class="line">  -&gt; (* (-&gt; a1 a2) (list a3)) unify -&gt; (* (-&gt; a3 a4) (list a3))  以及 (list a2) unify a5</div><div class="line">    -&gt; unify -&gt; 以及 * (-&gt; a1 a2) (list a3) unify * (-&gt; a3 a4) (list a3)， list a2 与 a5 不能合一</div><div class="line">      m 不变， * (-&gt; a1 a2) unify * (-&gt; a3 a4) 以及 (list a3) unify (list a3)</div><div class="line">        * unify * 以及 (-&gt; a1 a2) unify (-&gt; a3 a4) 以及 list unify list 以及 a3 unify a3</div><div class="line">          （-&gt; a1) unify (-&gt; a3) 以及 a2 unify a4</div><div class="line">              -&gt; unify -&gt; 以及 a1 unify a3，a2 与 a4 不能合一</div><div class="line">                a1 与 a3 不能合一</div></pre></td></tr></table></figure>
<p>因此，合一替换为 a1 =&gt; a3, a2 =&gt; a4, a5 =&gt; list a2</p>
<p>考虑对 <code>type1</code> 进行合一替换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">apply -&gt; (* (-&gt; a1 a2) (list a3)) (list a2)</div><div class="line">  &#123;apply -&gt; (* (-&gt; a1 a2) (list a3))&#125; 以及 &#123;apply (list a2)&#125;</div><div class="line">    &#123;&#123;apply -&gt;&#125; 以及 &#123;apply * (-&gt; a1 a2) (list a3)&#125;&#125;， &#123;list， 以及 apply a2&#125;</div><div class="line">      &#123;-&gt;， &#123;&#123;apply * (-&gt; a1 a2)&#125; 以及 &#123;apply (list a3)&#125;&#125;&#125;， &#123;list， a2 =&gt; a4&#125;</div><div class="line">        &#123;-&gt; &#123;*， &#123;apply (-&gt; a1 a2)&#125;， &#123;list， 以及 apply a3&#125;&#125;&#125;， &#123;list, a4&#125;</div><div class="line">          &#123;-&gt; &#123;*， &#123;apply (-&gt; a1) 以及 apply a2&#125;， &#123;list， a3&#125;&#125;&#125;， &#123;list， a4&#125;</div><div class="line">            &#123;-&gt; &#123;*， &#123;apply -&gt; 以及 apply a1， a2&#125;， &#123;list， a3&#125;&#125;&#125;， &#123;list， a4&#125;</div><div class="line">              &#123;-&gt; &#123;* &#123;-&gt; a3 a2&#125; &#123;list a3&#125;&#125;&#125; &#123;list a4&#125;</div><div class="line">              即 (-&gt; (* (-&gt; a3 a2) (list a3))) (list a4)</div></pre></td></tr></table></figure></p>
<p><code>type2</code> 同理。</p>
<hr>
<blockquote>
<p>加括号好累哦。 —— Kisaragi Sarasa </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你的类型， 0: 基本的合一&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://lingsamuel.github.io/tags/Note/"/>
    
      <category term="Your Type" scheme="https://lingsamuel.github.io/tags/Your-Type/"/>
    
  </entry>
  
</feed>
